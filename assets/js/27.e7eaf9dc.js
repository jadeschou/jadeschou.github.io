(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{305:function(t,s,a){"use strict";a.r(s);var n=a(13),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"几种基本数据类型-复杂数据类型-值类型和引用数据类型-堆栈数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#几种基本数据类型-复杂数据类型-值类型和引用数据类型-堆栈数据结构"}},[t._v("#")]),t._v(" 几种基本数据类型?复杂数据类型?值类型和引用数据类型?堆栈数据结构?")]),t._v(" "),s("p",[s("strong",[t._v("基本数据类型")]),t._v("：Undefined、Null、Boolean、Number、String、Symbol\n"),s("strong",[t._v("引用数据类型")]),t._v("：Object、Array、Function\n还有两个特殊的对象：正则（RegExp）和日期（Date）")]),t._v(" "),s("h2",{attrs:{id:"js-变量和函数声明的提升"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js-变量和函数声明的提升"}},[t._v("#")]),t._v(" js 变量和函数声明的提升")]),t._v(" "),s("p",[t._v("在 js 中函数声明 "),s("strong",[t._v("function aa(){}")]),t._v(" 与变量声明"),s("strong",[t._v("var")]),t._v("会提升到最顶部执行\n函数的提升高于变量的提升\n函数内部如果用 var 声明了相同名称的外部变量，函数将不再向上寻找。\n匿名函数不会提升。")]),t._v(" "),s("h2",{attrs:{id:"判断数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#判断数据类型"}},[t._v("#")]),t._v(" 判断数据类型?")]),t._v(" "),s("p",[s("strong",[t._v("typeof")]),t._v(" 对于基本数据类型来说，除了 null 都可以显示正确的类型，typeof 对于对象来说，除了函数都会显示 object")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'number'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"5"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'string'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'undefined'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'boolean'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'symbol'")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//object")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//number")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'object'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'object'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("log"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'function'")]),t._v("\n")])])]),s("p",[s("strong",[t._v("instanceof")]),t._v(" 通过原型链来判断数据类型的")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("p1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\np1 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),s("p",[s("code",[t._v("Object.prototype.toString.call()")]),t._v(" 可以检测所有的数据类型，算是一个比较完美的方法了。\n"),s("strong",[t._v("Array.isArray(value)")]),t._v("\n如果 value 是一个数组，则返回 true；否则返回 false。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[object Object]")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[object Array]")]),t._v("\n")])])]),s("h3",{attrs:{id:"浅拷贝赋值的区别-如何实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浅拷贝赋值的区别-如何实现"}},[t._v("#")]),t._v(" 浅拷贝赋值的区别，如何实现")]),t._v(" "),s("p",[t._v("深拷贝和浅拷贝是针对复杂数据类型来说的，浅拷贝只拷贝一层，而深拷贝是层层拷贝。")]),t._v(" "),s("h2",{attrs:{id:"浅拷贝"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浅拷贝"}},[t._v("#")]),t._v(" 浅拷贝：")]),t._v(" "),s("p",[t._v("将原对象或原数组的引用直接赋给新对象，新数组，新对象只是对原对象的一个引用，而不复制对象本身，新旧对象还是共享同一块内存")]),t._v(" "),s("p",[t._v("如果属性是一个基本数据类型，拷贝就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址,")]),t._v(" "),s("h2",{attrs:{id:"深拷贝"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝"}},[t._v("#")]),t._v(" 深拷贝：")]),t._v(" "),s("p",[t._v("创建一个新的对象和数组，将原对象的各项属性的“值”（数组的所有元素）拷贝过来，是“值”而不是“引用”")]),t._v(" "),s("p",[t._v("深拷贝就是把一个对象，从内存中完整的拷贝出来，从【堆内存】中开辟了新区域，用来存新对象，并且修改新对象不会影响原对象")]),t._v(" "),s("h2",{attrs:{id:"浅拷贝的实现方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浅拷贝的实现方式"}},[t._v("#")]),t._v(" 浅拷贝的实现方式:")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("Object.assign()\nObject.assign 会合并对象生成一个新对象。如果对象的属性是普通类型改变之后新对象不会改变，如果是引用类型改变后新对象也会改变，所以 Object.assign 实际上还是浅拷贝。")])]),t._v(" "),s("li",[s("p",[t._v("lodash 里面的 _.clone")])]),t._v(" "),s("li",[s("p",[t._v("...扩展运算符")])]),t._v(" "),s("li",[s("p",[t._v("Array.prototype.concat")])]),t._v(" "),s("li",[s("p",[t._v("Array.prototype.slice")])])]),t._v(" "),s("h3",{attrs:{id:"深拷贝的实现方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝的实现方式"}},[t._v("#")]),t._v(" 深拷贝的实现方式:")]),t._v(" "),s("ol",[s("li",[t._v("JSON.parse(JSON.stringify())\n利用 JSON.stringify(obj)将对象先转为 json 字符串，再 JSON.parse(）转回为 json 对象可以实现深拷贝，这也是比较常用的一种方法。")]),t._v(" "),s("li",[t._v("递归操作")]),t._v(" "),s("li",[t._v("cloneDeep")]),t._v(" "),s("li",[t._v("Jquery.extend()")])]),t._v(" "),s("p",[t._v("// 深拷贝：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("checkType")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("target")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("deepClone")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("checkType")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Array"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Object"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Array"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("includes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("checkType")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" key "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果拷贝的是简单类型的值直接进行赋值")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Object"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Array"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("includes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("checkType")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 定义一个映射，初始化的时候将 data 本身加入映射中")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" map "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WeakMap")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果拷贝的是复杂数据类型第一次拷贝后存入 map")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第二次再次遇到该值时直接赋值为 null，结束递归")]),t._v("\n        map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("has")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n          obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("deepClone")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"let-和-const-的区别是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#let-和-const-的区别是什么"}},[t._v("#")]),t._v(" let 和 const 的区别是什么?")]),t._v(" "),s("p",[t._v("let 命令不存在变量提升，如果在 let 前使用，会导致报错\n如果块区中存在 let 和 const 命令，就会形成封闭作用域\n不允许重复声明\nconst 定义的是常量，不能修改，但是如果定义的是对象，可以修改对象内部的数据")]),t._v(" "),s("h2",{attrs:{id:"eval-是做什么的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#eval-是做什么的"}},[t._v("#")]),t._v(" eval 是做什么的？")]),t._v(" "),s("p",[t._v("它的功能是把对应的字符串解析成 JS 代码并运行； 应该避免使用 eval，不安全，非常耗性能（2 次，一次解析成 js 语句，一次执行）。")]),t._v(" "),s("h2",{attrs:{id:"null-undefined-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#null-undefined-的区别"}},[t._v("#")]),t._v(" null，undefined 的区别？")]),t._v(" "),s("p",[t._v("undefined 表示变量声明但未初始化的值，null 表示准备用来保存对象，还没有真正保存对象的值。从逻辑角度看，null 表示一个空对象指针。")]),t._v(" "),s("h2",{attrs:{id:"和-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#和-的区别"}},[t._v("#")]),t._v(" == 和 ===的区别")]),t._v(" "),s("p",[t._v("==是非严格意义上的相等\n值相等就相等\n===是严格意义上的相等，会比较两边的数据类型和值大小\n值和引用地址都相等才相等")]),t._v(" "),s("h2",{attrs:{id:"同步和异步"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#同步和异步"}},[t._v("#")]),t._v(" 同步和异步")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("进程同步：就是在发出一个功能调用时，在没有得到结果之前，该调用就不返回。也就是必须一件一件事做,等前一件做完了才能做下一件事")])]),t._v(" "),s("li",[s("p",[t._v("步的概念和同步相对。当一个异步过程调用发出后，调用者不能立刻得到结果。实际处理这个调用的部件在完成后，通过状态、通知和回调来通知调用者。")])])]),t._v(" "),s("p",[s("strong",[t._v("好处")]),t._v("\n可以读取函数内部的变量\n将变量始终保持在内存中\n可以封装对象的私有属性和私有方法\n"),s("strong",[t._v("坏处")]),t._v("\n比较耗费内存、使用不当会造成内存溢出的问题")]),t._v(" "),s("h2",{attrs:{id:"this"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#this"}},[t._v("#")]),t._v(" this")]),t._v(" "),s("p",[t._v("this 总是指向函数的直接调用者\n如果有 new 关键字，this 指向 new 出来的对象\n在事件中，this 指向触发这个事件的对象")]),t._v(" "),s("h2",{attrs:{id:"谈谈你对-call、apply、bind-理解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#谈谈你对-call、apply、bind-理解"}},[t._v("#")]),t._v(" 谈谈你对 call、apply、bind 理解")]),t._v(" "),s("p",[t._v("都是来改变 this 指向和函数的调⽤，实际上 call 与 apply 的功能是相同的，只是两者的传参方式不一样，")]),t._v(" "),s("p",[t._v("call ⽅法跟的是⼀个参数列表，\napply 跟⼀个 数组作为参数，call ⽅法和 apply 使⽤后就直接调⽤\nbind 传参后不会立即执行，而是返回一个改变了 this 指向的函数，这个函数可以继续传参，且执行，需要类似于 bind()()两个括号才能调⽤。\n好处： 实现更好的继承和扩展，更安全。")]),t._v(" "),s("h2",{attrs:{id:"同源策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#同源策略"}},[t._v("#")]),t._v(" 同源策略")]),t._v(" "),s("p",[t._v("同源指的是域名、协议、端口号相同")]),t._v(" "),s("h2",{attrs:{id:"如何解决跨域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何解决跨域"}},[t._v("#")]),t._v(" 如何解决跨域")]),t._v(" "),s("p",[t._v("jsonp 跨域\ndocument.domain + iframe 跨域\nnodejs 中间件代理跨域\n后端在头部信息里面设置安全域名")]),t._v(" "),s("h2",{attrs:{id:"严格模式的限制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#严格模式的限制"}},[t._v("#")]),t._v(" 严格模式的限制")]),t._v(" "),s("p",[t._v("变量必须声明后再使用\n函数的参数不能有同名属性，否则报错\n不能使用 with 语句\n禁止 this 指向全局对象")]),t._v(" "),s("h2",{attrs:{id:"es6-新增"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#es6-新增"}},[t._v("#")]),t._v(" es6 新增")]),t._v(" "),s("p",[t._v("新增模板字符串\n箭头函数\nfor-of（用来遍历数据—例如数组中的值。）\nES6 将 Promise 对象纳入规范，提供了原生的 Promise 对象。\n增加了 let 和 const 命令，用来声明变量。\n还有就是引入 module 模块的概念")]),t._v(" "),s("h2",{attrs:{id:"内存泄漏"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内存泄漏"}},[t._v("#")]),t._v(" 内存泄漏")]),t._v(" "),s("p",[t._v("定义：程序中己动态分配的堆内存由于某种原因程序未释放或无法释放引发的各种问题。\njs 中可能出现的内存泄漏情况：结果：变慢，崩溃，延迟大等\njs 中可能出现的内存泄漏原因\n全局变量\ndom 清空时，还存在引用\n定时器未清除\n子元素存在引起的内存泄露")]),t._v(" "),s("h2",{attrs:{id:"js-垃圾回收机制是怎样的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js-垃圾回收机制是怎样的"}},[t._v("#")]),t._v(" JS 垃圾回收机制是怎样的？")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("概述\njs 的垃圾回收机制是为了防止内存泄漏（已经不需要的某一块内存还一直存在着），垃圾回收机制就是不停歇的寻找这些不再使用的变量，并且释放掉它所指向的内存。\n在 JS 中，JS 的执行环境会负责管理代码执行过程中使用的内存。")])]),t._v(" "),s("li",[s("p",[t._v("变量的生命周期\n当一个变量的生命周期结束之后，它所指向的内存就会被释放。js 有两种变量，局部变量和全局变量，局部变量是在他当前的函数中产生作用，当该函数结束之后，该变量内存会被释放，全局变量的话会一直存在，直到浏览器关闭为止。")])]),t._v(" "),s("li",[s("p",[t._v("js 垃圾回收方式\n有两种方式： 标记清除、引用计数")])])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("标记清除")]),t._v("：大部分浏览器使用这种垃圾回收，当变量进入执行环境(声明变量）的时候，垃圾回收器将该变量进行了标记，当该变量离开环境的时候，将其再度标记，随之进行删除。")]),t._v(" "),s("li",[s("strong",[t._v("引用计数")]),t._v("：这种方式常常会引起内存的泄露，主要存在于低版本的浏览器。它的机制就是跟踪某一个值得引用次数，当声明一个变量并且将一个引用类型赋值给变量得时候引用次数加 1，当这个变量指向其他一个时引用次数减 1，当为 0 时出发回收机制进行回收。")])]),t._v(" "),s("h2",{attrs:{id:"堆栈溢出有什么区别-内存泄漏-那些操作会造成内存泄漏-怎么样防止内存泄漏"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆栈溢出有什么区别-内存泄漏-那些操作会造成内存泄漏-怎么样防止内存泄漏"}},[t._v("#")]),t._v(" 堆栈溢出有什么区别？ 内存泄漏? 那些操作会造成内存泄漏？怎么样防止内存泄漏？")]),t._v(" "),s("p",[t._v("堆栈溢出：就是不顾堆栈中分配的局部数据块大小，向该数据块写入了过多的数据，导致数据越界，结果覆盖了别的数据。经常会在递归中发生。\n内存泄露是指：用动态存储分配函数内存空间，在使用完毕后未释放，导致一直占据该内存单元。直到程序结束。指任何对象在您不再拥有或需要它之后仍然存在。")]),t._v(" "),s("p",[t._v("造成内存泄漏：\nsetTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏。\n闭包、控制台日志、循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）\n防止内存泄露：\n1、不要动态绑定事件；\n2、不要在动态添加，或者会被动态移除的 dom 上绑事件，用事件冒泡在父容器监听事件；\n3、如果要违反上面的原则，必须提供 destroy 方法，保证移除 dom 后事件也被移除，这点可以参考 Backbone 的源代码，做的比较好；\n4、单例化，少创建 dom，少绑事件。")]),t._v(" "),s("h2",{attrs:{id:"说说面向对象编程思想"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#说说面向对象编程思想"}},[t._v("#")]),t._v(" 说说面向对象编程思想?")]),t._v(" "),s("p",[t._v("面向对象是基于万物皆对象这个哲学观点. 把一个对象抽象成类,具体上就是把一个对象的静态特征和动态特征抽象成属性和方法,也就是把一类事物的算法和数据结构封装在一个类之中,程序就是多个对象和互相之间的通信组成的.\n"),s("strong",[t._v("三大特性")]),t._v("\n面向对象具有封装性,继承性,多态性。\n"),s("strong",[t._v("优点")])]),t._v(" "),s("ul",[s("li",[t._v("易维护、易扩展")]),t._v(" "),s("li",[t._v("提高了大型程序的重用性和可维护性，降低重复工作量，缩短了开发周期")])]),t._v(" "),s("p",[t._v("封装:隐蔽了对象内部不需要暴露的细节,使得内部细节的变动跟外界脱离,只依靠接口进行通信.封装性降低了编程的复杂性.\n通过继承,使得新建一个类变得容易,一个类从派生类那里获得其非私有的方法和公用属性的繁琐工作交给了编译器. 而 继承和实现接口和运行时的类型绑定机制 所产生的多态,使得不同的类所产生的对象能够对相同的消息作出不同的反应,极大地提高了代码的通用性.")]),t._v(" "),s("p",[t._v("总之,面向对象的特性提高了大型程序的重用性和可维护性.")]),t._v(" "),s("p",[s("strong",[t._v("七大设计原则")])]),t._v(" "),s("ol",[s("li",[s("p",[t._v("开闭原则\n一个软件实体，如类，模块和函数应该多外扩展开发，对内修改关闭\n即不修改原有代码的前提下给程序扩展功能，增加了程序的可扩展性。")])]),t._v(" "),s("li",[s("p",[t._v("单一职责原则\n一个类只允许有一个职责，即只有一个导致该类变更的原因")])]),t._v(" "),s("li",[s("p",[t._v("依赖倒置原则")])])]),t._v(" "),s("p",[t._v("依赖抽象而不是依赖实现，高层模块不能依赖底层模块\n即针对接口编程，而不是针对实现编程，通过抽象搭建框架，建立类与类的关联，以减少类间的耦合性。")]),t._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[t._v("接口分离原则")])]),t._v(" "),s("p",[t._v("多个特定的客户端接口要好于一个通用性的总接口；\n避免用一个接口里面包含不同职责的方法，接口责任划分更加明确")]),t._v(" "),s("ol",{attrs:{start:"5"}},[s("li",[s("p",[t._v("迪米特法则\n一个对象应该对尽可能少的对象有接触，只接触那些真正需要接触的对象")])]),t._v(" "),s("li",[s("p",[t._v("里氏替换原则\n所有引用基类的地方必须能透明地使用其子类的对象，而程序执行效果不变。可以检测继承使用的正确性。")])]),t._v(" "),s("li",[s("p",[t._v("合成复用原则\n尽量使用合成/聚合的方式，而不是使用继承。")])])]),t._v(" "),s("h2",{attrs:{id:"什么是单线程-和异步的关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是单线程-和异步的关系"}},[t._v("#")]),t._v(" 什么是单线程，和异步的关系？")]),t._v(" "),s("p",[t._v("单线程 ：只有一个线程，只能做一件事\n原因 ： 避免 DOM 渲染的冲突\n浏览器需要渲染 DOM\nJS 可以修改 DOM 结构\nJS 执行的时候，浏览器 DOM 渲染会暂停\n两段 JS 也不能同时执行（都修改 DOM 就冲突了）\nwebworker 支持多线程，但是不能访问 DOM\n解决方案 ：异步")]),t._v(" "),s("h2",{attrs:{id:"逐进增强和优雅降级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#逐进增强和优雅降级"}},[t._v("#")]),t._v(" 逐进增强和优雅降级")]),t._v(" "),s("p",[t._v("逐进增强\n针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高版本浏览器进行效果、交互等改进和追加功能达到更好的用户体验。\n优雅降级\n一开始就构建完整的功能，然后再针对低版本浏览器进行兼容")]),t._v(" "),s("h2",{attrs:{id:"堆和栈存储机制有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆和栈存储机制有什么区别"}},[t._v("#")]),t._v(" 堆和栈存储机制有什么区别")]),t._v(" "),s("p",[t._v("堆 是一种非连续的树形储存数据结构，每个节点有一个值，整棵树是经过排序的。特点是根结点的值最小（或最大），且根结点的两个子树也是一个堆。常用来实现优先队列，存取随意。\n栈 是一种连续储存的数据结构，具有先进后出的性质。\n通常的操作有入栈（压栈），出栈和栈顶元素。想要读取栈中的某个元素，就是将其之间的所有元素出栈才能完成。")]),t._v(" "),s("h2",{attrs:{id:"防抖和节流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#防抖和节流"}},[t._v("#")]),t._v(" 防抖和节流")]),t._v(" "),s("p",[s("strong",[t._v("防抖")]),t._v("：所谓防抖，就是指触发事件后在 n 秒内函数只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数执行时间。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * 1.触发事件\n * 2.setTimeout\n * 3.clearTimeout\n * 4.this的指向\n *\n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("debounce")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("fn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" delay")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" timer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" me "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    timer "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("clearInterval")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("timer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    timer "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("me"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" delay"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("strong",[t._v("节流")]),t._v("：所谓节流，就是指连续触发事件但是在 n 秒中只执行一次函数。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("throttle")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("fn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" delay")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" timer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("timer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" me "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" _arg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arguments"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    timer "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("me"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" _arg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      timer "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" delay"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"arguments-的对象是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arguments-的对象是什么"}},[t._v("#")]),t._v(" arguments 的对象是什么？")]),t._v(" "),s("p",[t._v("arguments 当我们不知道有多少个参数传进来的时候就用 arguments 来接收，是一个类似于数组的对象，他有 length 属性，可以 arguments[ i ]来访问对象中的元素， 但是它不能用数组的一些方法。 例如 push、pop、slice 等。arguments 虽然不是一个数组，但是它可以转成一个真正的数组。取之可以用 展开运算符来 数组和类数组类数组： ① 拥有 length 属性，其它属性(索引)为非负整数；箭头函数里没有 arguments ② 不具有数组所具有的方法； ③ 类数组是一个普通对象，而真实的数组是 Array 类型。")]),t._v(" "),s("h2",{attrs:{id:"柯里化函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#柯里化函数"}},[t._v("#")]),t._v(" 柯里化函数")]),t._v(" "),s("p",[t._v("柯里化函数：把一个多参数的函数转化为单参数函数的方法。并且返回接受余下的参数而且返回结果的新函数的技术。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 简单的相加函数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 柯里化以后")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("add2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//柯里化函数(闭包)")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("y")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"new-的原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#new-的原理"}},[t._v("#")]),t._v(" new 的原理")]),t._v(" "),s("p",[t._v("new 实际上是在堆内存中开辟一个空间。")]),t._v(" "),s("ul",[s("li",[t._v("① 创建一个空对象，构造函数中的 this 指向这个空对象；")]),t._v(" "),s("li",[t._v("② 这个新对象被执行[ [ 原型 ] ]连接；")]),t._v(" "),s("li",[t._v("③ 执行构造函数方法，属性和方法被添加到 this 引用的对象中；")]),t._v(" "),s("li",[t._v("④ 如果构造函数中没有返回其它对象，那么返回 this，即创建的这个的新对象，否则，返回构造函数中返回的对象。")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("_new")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" target "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//创建的新对象")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("constructor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("arguments"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//执行[[原型]]连接,target是constructor的实例")]),t._v("\n  target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" constructor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//执行构造函数,将属性或方法添加到创建的空对象上")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" constructor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"object"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"function"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果构造函数执行的结构返回的是一个对象,那么返回这个对象")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果构造函数返回的不是一个对象,返回创建的对象")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"谈谈你对-js-eventloop-事件循环-的理解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#谈谈你对-js-eventloop-事件循环-的理解"}},[t._v("#")]),t._v(" 谈谈你对 JS eventloop(事件循环)的理解")]),t._v(" "),s("p",[t._v("浏览器内核是多线程，JavaScript 是单线程；")]),t._v(" "),s("p",[t._v("JS 单线程详解：因为 js 是面向客户端的一门语言，主要是用户交互，操作 dom，渲染数据。试想一下。\n如果是多线程，我们在一个线程删除了一个 dom 节点，另外一个线程添加了一个 dom 节点，以那个线程为主呢，\n就会出现混乱的情况。当然你可以说我们在操作一个 dom 之后加上锁，只允许一个线程操作，这样其实增加了程序的复杂度，\n并不是一个好办法。\n单线程产生的问题：必须要等待前一个程序执行完毕才执行下一个，所以将程序分为了两类：同步任务和异步任务。")]),t._v(" "),s("p",[t._v("异步任务又可以分为宏任务和微任务。")]),t._v(" "),s("p",[t._v("栈：先进后出的数据结构，存储基本数据类型的变量。\n堆：主要负责引用数据类型的存储。")]),t._v(" "),s("p",[t._v("任务队列：为什么会有任务队列呢，还是因为 javascript 单线程的原因，单线程，就意味着一个任务一个任务的执行，\n执行完当前任务，执行下一个任务，这样也会遇到一个问题，就比如说，要向服务端通信，加载大量数据，如果是同步执行，\njs 主线程就得等着这个通信完成，然后才能渲染数据，为了高效率的利用 cpu, 就有了同步任务和异步任务之分。\n同步任务： 指的是在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务。")]),t._v(" "),s("p",[t._v("异步任务： 指的是不进入主线程，某个异步任务可以执行了，该任务才会进入主线程执行。")]),t._v(" "),s("p",[t._v("微任务：\npromise 的回调、node 中的 process.nextTick 、对 Dom 变化监听的 MutationObserver。")]),t._v(" "),s("p",[t._v("宏任务：\nscript 脚本的执行、setTimeout ，setInterval ，setImmediate 一类的定时事件，还有如 I/O 操作、UI 渲染等。")]),t._v(" "),s("p",[t._v("setTimeout(function() {\nconsole.log(1)\n}, 0);\nnew Promise(function(resolve, reject) {\nconsole.log(2);\nresolve()\n}).then(function() {\nconsole.log(3)\n});\nprocess.nextTick(function () {\nconsole.log(4)\n})\nconsole.log(5)\n// 2\n// 5\n// 3\n// 4\n// 1")]),t._v(" "),s("h2",{attrs:{id:"如何让-a-1-a-2-a-3-的值为-true"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何让-a-1-a-2-a-3-的值为-true"}},[t._v("#")]),t._v(" 如何让(a == 1 && a == 2 && a == 3)的值为 true？")]),t._v(" "),s("p",[t._v('// " == "操作符在左右数据不一致的时候，会先进行隐式转换，该值意味着不是基本数据类型，\n// 因为如果 a 是 null 或者 undefined、bool 类型都不可能返回 true；可以推测 a 是复杂数据类型。')]),t._v(" "),s("p",[t._v("// 方法一：数组的 toString 接口默认调用数组的 join 方法，重新 join 方法\nlet a = [1, 2, 3];\na.join = a.shift;\nconsole.log(a == 1 && a == 2 && a == 3) //true")]),t._v(" "),s("p",[t._v("// 方法二：利用数据劫持(Proxy/Object.definedProperty)\nlet i = 1;\nlet a = new Proxy({},{\ni:1,\nget:function(){\nreturn () => this.i++\n}\n});\nconsole.log(a == 1 && a == 2 && a == 3); // true")]),t._v(" "),s("h2",{attrs:{id:"为什么-0-1-0-2-0-3-如何让其相等"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么-0-1-0-2-0-3-如何让其相等"}},[t._v("#")]),t._v(" 为什么 0.1 + 0.2 !== 0.3，如何让其相等")]),t._v(" "),s("p",[t._v("// 在开发过程中遇到类似这样的问题：\nlet n1 = 0.1;\nlet n2 = 0.2;\nconsole.log(n1 + n2) // 0.30000000000000004")]),t._v(" "),s("p",[t._v("/**")]),t._v(" "),s("ul",[s("li",[t._v("使用浮点数进行计算逻辑处理时，不注意，就可能出现问题")]),t._v(" "),s("li",[t._v("记住，永远不要直接比较俩个浮点的大小")]),t._v(" "),s("li",[t._v("这个属于数字运算中的精度缺失的问题")]),t._v(" "),s("li",[t._v("在 0.1 + 0.2 这个式子中，0.1 和 0.2 都是近似表示的，在他们相加的时候，两个近似值进行了计算，导致最后得到的值是 0.30000000000000004\n*/\n// 简单粗暴的方式\nparseFloat((0.1 + 0.2).toFixed(10)) === 0.3")])]),t._v(" "),s("h2",{attrs:{id:"for-in-迭代和-for-of-有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#for-in-迭代和-for-of-有什么区别"}},[t._v("#")]),t._v(" for...in 迭代和 for...of 有什么区别")]),t._v(" "),s("ol",[s("li",[t._v("推荐在循环对象属性的时候，使用 for...in，在遍历数组的时候的时候使用 for...of。")]),t._v(" "),s("li",[t._v("for in 遍历的是数组的索引，而 for of 遍历的是数组元素值")]),t._v(" "),s("li",[t._v("for...of 不能循环普通的对象，需要通过和 Object.keys()搭配使用")]),t._v(" "),s("li",[t._v("for...in 便利顺序以数字为先 无法便利 symbol 属性 可以便利到公有中可枚举的")]),t._v(" "),s("li",[t._v("从遍历对象的角度来说，for···in 会遍历出来的为对象的 key，但 for···of 会直接报错。")])]),t._v(" "),s("h2",{attrs:{id:"谈谈你对-promise、generator、async-await-理解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#谈谈你对-promise、generator、async-await-理解"}},[t._v("#")]),t._v(" 谈谈你对 promise、Generator、async/await 理解")]),t._v(" "),s("p",[t._v("promise 和 async/await 是专门用于处理异步操作的")]),t._v(" "),s("p",[t._v("Generator 并不是为异步而设计出来的，它还有其他功能（对象迭代、控制输出、部署 Interator 接口…）")]),t._v(" "),s("p",[t._v("promise 编写代码相比 Generator、async 更为复杂化，且可读性也稍差")]),t._v(" "),s("p",[t._v("Generator、async 需要与 promise 对象搭配处理异步情况")]),t._v(" "),s("p",[t._v("async 实质是 Generator 的语法糖，相当于会自动执行 Generator 函数")]),t._v(" "),s("p",[t._v("async 使用上更为简洁，将异步代码以同步的形式进行编写，是处理异步编程的最终方案")]),t._v(" "),s("h2",{attrs:{id:"谈谈你对模块化开发的理解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#谈谈你对模块化开发的理解"}},[t._v("#")]),t._v(" 谈谈你对模块化开发的理解？")]),t._v(" "),s("p",[t._v("我对模块的理解是，一个模块是实现一个特定功能的一组方法。在最开始的时候，js 只实现一些简单的功能，\n所以并没有模块的概念，但随着程序越来越复杂，代码的模块化开发变得越来越重要。")]),t._v(" "),s("p",[t._v("由于函数具有独立作用域的特点，最原始的写法是使用函数来作为模块，几个函数作为一个模块，但是这种方式容易造成全局变量的污染，并且模块间没有联系。")]),t._v(" "),s("p",[t._v("对象写法，通过将函数作为一个对象的方法来实现，这样解决了直接使用函数作为模块的一些缺点，但是这种办法会暴露所有的模块成员，外部代码可以修改内部属性的值。")]),t._v(" "),s("p",[t._v("现在最常用的是立即执行函数的写法，通过利用闭包来实现模块私有作用域的建立，同时不会对全局作用域造成污染。")]),t._v(" "),s("h2",{attrs:{id:"js-的几种模块规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js-的几种模块规范"}},[t._v("#")]),t._v(" js 的几种模块规范？")]),t._v(" "),s("p",[t._v("js 中现在比较成熟的有四种模块加载方案：")]),t._v(" "),s("ol",[s("li",[s("p",[s("strong",[t._v("CommonJS")]),t._v(" 方案，它通过 require 来引入模块，通过 module.exports 定义模块的输出接口。这种模块加载方案是服务器端的解决方案，它是以同步的方式来引入模块的，因为在服务端文件都存储在本地磁盘，所以读取非常快，所以以同步的方式加载没有问题。但如果是在浏览器端，由于模块的加载是使用网络请求，因此使用异步加载的方式更加合适。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("AMD")]),t._v(" 方案，这种方案采用异步加载的方式来加载模块，模块的加载不影响后面语句的执行，所有依赖这个模块的语句都定义在一个回调函数里，等到加载完成后再执行回调函数。require.js 实现了 AMD 规范。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("CMD")]),t._v(" 方案，这种方案和 AMD 方案都是为了解决异步模块加载的问题，sea.js 实现了 CMD 规范。它和 require.js 的区别在于模块定义时对依赖的处理不同和对依赖模块的执行时机的处理不同。\n"),s("strong",[t._v("AMD 与 CDM 的区别：")]),t._v("\n（1）对于于依赖的模块，AMD 是提前执行(好像现在也可以延迟执行了)，CMD 是延迟执行。\n（2）AMD 推崇依赖前置，CMD 推崇依赖就近。\n（3）AMD 推崇复用接口，CMD 推崇单用接口。\n（4）书写规范的差异。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("ES6")]),t._v(" 使用 import 和 export 的形式来导入导出模块。")])])]),t._v(" "),s("h2",{attrs:{id:"require-与-import-的区别和使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#require-与-import-的区别和使用"}},[t._v("#")]),t._v(" require 与 import 的区别和使用")]),t._v(" "),s("p",[t._v("1、import 是 ES6 中的语法标准也是用来加载模块文件的，import 函数可以读取并执行一个 JavaScript 文件，然后返回该模块的 export 命令指定输出的代码。export 与 export default 均可用于导出常量、函数、文件、模块，export 可以有多个，export default 只能有一个。")]),t._v(" "),s("p",[t._v("2、require 定义模块：module 变量代表当前模块，它的 exports 属性是对外的接口。通过 exports 可以将模块从模块中导出，其他文件加载该模块实际上就是读取 module.exports 变量，他们可以是变量、函数、对象等。在 node 中如果用 exports 进行导出的话系统会系统帮您转成 module.exports 的，只是导出需要定义导出名。")]),t._v(" "),s("p",[s("strong",[t._v("require 与 import 的区别")])]),t._v(" "),s("ol",[s("li",[t._v("require 是 CommonJS 规范的模块化语法，import 是 ECMAScript 6 规范的模块化语法；")]),t._v(" "),s("li",[t._v("require 是运行时加载，import 是编译时加载；")]),t._v(" "),s("li",[t._v("require 可以写在代码的任意位置，import 只能写在文件的最顶端且不可在条件语句或函数作用域中使用；")]),t._v(" "),s("li",[t._v("require 通过 module.exports 导出的值就不能再变化，import 通过 export 导出的值可以改变；")]),t._v(" "),s("li",[t._v("require 通过 module.exports 导出的是 exports 对象，import 通过 export 导出是指定输出的代码；")]),t._v(" "),s("li",[t._v("require 运行时才引入模块的属性所以性能相对较低，import 编译时引入模块的属性所以性能稍高。")])]),t._v(" "),s("h2",{attrs:{id:"js-延迟加载的方式有哪些"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js-延迟加载的方式有哪些"}},[t._v("#")]),t._v(" js 延迟加载的方式有哪些？")]),t._v(" "),s("p",[t._v("defer 和 async、动态创建 DOM 方式（用得最多）、按需异步载入 js")]),t._v(" "),s("h2",{attrs:{id:"说说异步编程的实现方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#说说异步编程的实现方式"}},[t._v("#")]),t._v(" 说说异步编程的实现方式?")]),t._v(" "),s("p",[s("strong",[t._v("回调函数（callbacks）")]),t._v("\n优点：简单、容易理解\n缺点：不利于维护、代码耦合高，，流程会很混乱，而且每个任务只能指定一个回调函数。")]),t._v(" "),s("p",[s("strong",[t._v("事件监听")]),t._v("\n优点：可以绑定多个事件，每个事件可以指定多个回调函数，有利于实现模块化\n缺点：整个程序都要变成事件驱动型，运行流程会变得很不清晰。")]),t._v(" "),s("p",[t._v("发布/订阅(观察者模式)\n类似于事件监听，但是可以通过‘消息中心’，了解现在有多少发布者，多少订阅者")]),t._v(" "),s("p",[s("strong",[t._v("Promise 对象")]),t._v("\n它的思想是，每一个异步任务返回一个 Promise 对象，该对象有一个 then 方法，允许指定回调函数。\n优点：可以利用 then 方法，进行链式写法；可以书写错误时的回调函数\n缺点：编写和理解，相对比较难")]),t._v(" "),s("p",[s("strong",[t._v("Generator 函数")]),t._v("\n优点：函数体内外的数据交换、错误处理机制\n缺点：流程管理不方便")]),t._v(" "),s("p",[s("strong",[t._v("async 函数")]),t._v("\n优点：内置执行器、更好的语义、更广的适用性、返回的是 Promise、结构清晰\n缺点：错误处理机制")]),t._v(" "),s("h2",{attrs:{id:"如何清除一个定时器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何清除一个定时器"}},[t._v("#")]),t._v(" 如何清除一个定时器?")]),t._v(" "),s("p",[t._v("window.clearInterval();\nwindow.clearTimeout();")]),t._v(" "),s("h2",{attrs:{id:"事件委托-有什么好处"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事件委托-有什么好处"}},[t._v("#")]),t._v(" 事件委托？有什么好处?")]),t._v(" "),s("p",[t._v("事件委托也叫事件代理，“事件代理”即是把原本需要绑定在子元素的响应事件（click、keydown…）委托给父元素，让父元素担当事件监听的职务。事件代理的原理是 DOM 元素的事件冒泡。")]),t._v(" "),s("p",[t._v("可以大量节省内存占用，减少事件注册，比如在 ul 上代理所有 li 的 click 事件。\n可以实现当新增子对象时无需再次对其绑定（动态绑定事件）")]),t._v(" "),s("h2",{attrs:{id:"gc-机制是什么-为什么闭包不会被回收变量和函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gc-机制是什么-为什么闭包不会被回收变量和函数"}},[t._v("#")]),t._v(" Gc 机制是什么？为什么闭包不会被回收变量和函数？")]),t._v(" "),s("p",[t._v("1、Gc 垃圾回收机制;\n2、外部变量没释放，所以指向的大函数内的小函数也释放不了")]),t._v(" "),s("h2",{attrs:{id:"promise"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#promise"}},[t._v("#")]),t._v(" promise")]),t._v(" "),s("p",[t._v("Promise 的构造函数接收一个参数，是函数，并且传入两个参数：resolve，reject，分别表示异步操作执行成功后的回调函数和异步操作执行失败后的回调函数。")]),t._v(" "),s("h2",{attrs:{id:"如何创建一个对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何创建一个对象"}},[t._v("#")]),t._v(" 如何创建一个对象？")]),t._v(" "),s("ol",[s("li",[t._v("工厂模式")]),t._v(" "),s("li",[t._v("构造函数模式")]),t._v(" "),s("li",[t._v("原型模式")]),t._v(" "),s("li",[t._v("混合构造函数和原型模式")]),t._v(" "),s("li",[t._v("动态原型模式")]),t._v(" "),s("li",[t._v("寄生构造函数模式")]),t._v(" "),s("li",[t._v("稳妥构造函数模式")])]),t._v(" "),s("p",[t._v("程序的设计模式?工厂模式?发布订阅?\n1）设计模式并不是某种语言的某块代码，设计模式是一种思想，提供给在编码时候遇到的各种问题是可以采取的解决方案，更倾向于一种逻辑思维，而不是万能代码块。\n设计模式主要分三个类型:创建型、结构型和行为型。\n创建型模式：单例模式，抽象工厂模式，建造者模式，工厂模式与原型模式。\n结构型模式：适配器模式，桥接模式，装饰者模式，组合模式，外观模式，享元模式以及代理模式。\n行为型模式：模板方法模式，命令模式，迭代器模式，观察者模式，中介者模式，备忘录模式，解释器模式，状态模式，策略模式，职责链模式和访问者模式。")]),t._v(" "),s("p",[t._v("2）与创建型模式类似，工厂模式创建对象（视为工厂里的产品）是无需指定创建对象的具体类。\n工厂模式定义一个用于创建对象的接口，这个接口由子类决定实例化哪一个类。该模式使一个类的实例化延迟到了子类。而子类可以重写接口方法以便创建的时候指定自己的对象类型。")]),t._v(" "),s("p",[t._v("3）观察者模式又叫做发布订阅模式，它定义了一种一对多的关系，让多个观察者对象同时监听某一个主题对象，这个主题对象的状态发生改变时就会通知所有观察着对象。它是由两类对象组成，主题和观察者，主题负责发布事件，同时观察者通过订阅这些事件来观察该主体，发布者和订阅者是完全解耦的，彼此不知道对方的存在，两者仅仅共享一个自定义事件的名称。\n( 设计模式实在是太高深了，小伙伴门结合网上实例自行学习，我实在是无能为力啊 )")]),t._v(" "),s("h2",{attrs:{id:"js-的几种继承方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js-的几种继承方式"}},[t._v("#")]),t._v(" js 的几种继承方式？")]),t._v(" "),s("p",[t._v("1.使用对象冒充实现继承 2.采用 call、Apply 方法改变函数上下文实现继承 3.原型链方式继承")]),t._v(" "),s("h2",{attrs:{id:"作用域链"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#作用域链"}},[t._v("#")]),t._v(" 作用域链？")]),t._v(" "),s("p",[t._v("作用域链可以理解为一组对象列表，包含 父级和自身的变量对象，因此我们便能通过作用域链访问到父级里声明的变量或者函数")]),t._v(" "),s("p",[t._v("因为函数的嵌套形成作用域的层级关系。当函数执行时，从当前作用域开始搜，没有找到的变量，会向上层作用域查找，直至全局函数，这就是作用域链。")]),t._v(" "),s("p",[t._v("• 在 JavaScript 中，作用域为 function(){}内的区域，称为函数作用域。")]),t._v(" "),s("p",[t._v("• 全局函数无法查看局部函数的内部细节，但局部函数可以查看其上层的函数细节，直至全局细节")]),t._v(" "),s("h2",{attrs:{id:"闭包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[t._v("#")]),t._v(" 闭包")]),t._v(" "),s("p",[t._v("闭包：就是能够读取其他函数内部变量的函数。")]),t._v(" "),s("p",[t._v("闭包基本上就是一个函数内部返回一个函数")]),t._v(" "),s("h2",{attrs:{id:"什么是原型、原型链、继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是原型、原型链、继承"}},[t._v("#")]),t._v(" 什么是原型、原型链、继承？")]),t._v(" "),s("p",[t._v("所有的函数都有 prototype 属性（原型）\n所有的对象都有 proto 属性\n在 Javascript 中，每个函数都有一个原型属性 prototype 指向自身的原型，而由这个函数创建的对象也有一个 proto 属性指向这个原型，而函数的原型是一个对象，所以这个对象也会有一个 proto 指向自己的原型，这样逐层深入直到 Object 对象的原型，这样就形成了原型链。")])])}),[],!1,null,null,null);s.default=e.exports}}]);